To add a task or integrate a task API, you should modify the Rust backend files responsible for handling tasks. The key file for managing tasks will be tasks.rs.


---

1. Modify tasks.rs

File Path: src/tasks.rs

If you're manually adding tasks, update the function that stores and retrieves tasks.

If you're integrating an API, make an HTTP request inside this file to fetch tasks from an external service.


Example: Manually Adding a Task

use serde::{Serialize, Deserialize};

#[derive(Serialize, Deserialize, Clone)]
pub struct Task {
    pub id: i32,
    pub name: String,
    pub description: String,
    pub reward: f64,
}

pub fn get_tasks() -> Vec<Task> {
    vec![
        Task {
            id: 1,
            name: "Survey on Technology",
            description: "Complete this survey about technology trends.",
            reward: 50.0,
        },
        Task {
            id: 2,
            name: "Watch an Ad",
            description: "Watch a 30-second advertisement to earn rewards.",
            reward: 10.0,
        },
    ]
}


---

Example: Fetching Tasks from an External API

If you want to get tasks from an API, use reqwest:

First, add reqwest to Cargo.toml:

reqwest = { version = "0.11", features = ["json"] }
tokio = { version = "1", features = ["full"] }

Then, modify tasks.rs:

use reqwest;
use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Debug)]
pub struct Task {
    pub id: i32,
    pub name: String,
    pub description: String,
    pub reward: f64,
}

pub async fn fetch_tasks_from_api() -> Result<Vec<Task>, reqwest::Error> {
    let api_url = "https://example.com/api/tasks"; // Replace with actual API URL
    let response = reqwest::get(api_url).await?;
    let tasks: Vec<Task> = response.json().await?;
    Ok(tasks)
}


---

2. Modify dashboard.html or the Category Pages

File Path: templates/dashboard.html

To display tasks dynamically, modify the HTML file where tasks are listed.

<div id="task-list">
    <h2>Available Tasks</h2>
    <ul id="tasks"></ul>
</div>

<script>
async function loadTasks() {
    let response = await fetch("/api/tasks");
    let tasks = await response.json();
    let taskList = document.getElementById("tasks");

    tasks.forEach(task => {
        let li = document.createElement("li");
        li.innerHTML = `<strong>${task.name}</strong>: ${task.description} - <b>KES ${task.reward}</b>`;
        taskList.appendChild(li);
    });
}

window.onload = loadTasks;
</script>


---

3. Modify main.rs to Serve Tasks

File Path: src/main.rs

Register an API endpoint to return tasks from tasks.rs.


use warp::Filter;
mod tasks;

#[tokio::main]
async fn main() {
    let task_route = warp::path("api")
        .and(warp::path("tasks"))
        .map(|| warp::reply::json(&tasks::get_tasks()));

    warp::serve(task_route).run(([127, 0, 0, 1], 3030)).await;
}


---

Where to Modify?


---

How to Test?

1. Run the Rust server:

cargo run


2. Open in Browser:
Go to http://localhost:3030/api/tasks to see the available tasks.


3. Check Frontend:
Visit http://localhost:3030/dashboard.html to see tasks displayed.




---

Let me know if you need further customization! ðŸš€

